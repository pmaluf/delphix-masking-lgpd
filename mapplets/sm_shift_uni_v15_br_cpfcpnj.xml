<?xml version="1.0" encoding="UTF-8"?>
<transformation>
  <info>
    <name>sm_shift_uni_v15_cpfcpnj</name>
    <description />
    <extended_description />
    <trans_version />
    <trans_type>Normal</trans_type>
    <trans_status>0</trans_status>
    <directory>/</directory>
    <parameters>
    </parameters>
    <log>
      <trans-log-table>
        <connection />
        <schema />
        <table />
        <size_limit_lines />
        <interval />
        <timeout_days />
        <field>
          <id>ID_BATCH</id>
          <enabled>Y</enabled>
          <name>ID_BATCH</name>
        </field>
        <field>
          <id>CHANNEL_ID</id>
          <enabled>Y</enabled>
          <name>CHANNEL_ID</name>
        </field>
        <field>
          <id>TRANSNAME</id>
          <enabled>Y</enabled>
          <name>TRANSNAME</name>
        </field>
        <field>
          <id>STATUS</id>
          <enabled>Y</enabled>
          <name>STATUS</name>
        </field>
        <field>
          <id>LINES_READ</id>
          <enabled>Y</enabled>
          <name>LINES_READ</name>
          <subject />
        </field>
        <field>
          <id>LINES_WRITTEN</id>
          <enabled>Y</enabled>
          <name>LINES_WRITTEN</name>
          <subject />
        </field>
        <field>
          <id>LINES_UPDATED</id>
          <enabled>Y</enabled>
          <name>LINES_UPDATED</name>
          <subject />
        </field>
        <field>
          <id>LINES_INPUT</id>
          <enabled>Y</enabled>
          <name>LINES_INPUT</name>
          <subject />
        </field>
        <field>
          <id>LINES_OUTPUT</id>
          <enabled>Y</enabled>
          <name>LINES_OUTPUT</name>
          <subject />
        </field>
        <field>
          <id>LINES_REJECTED</id>
          <enabled>Y</enabled>
          <name>LINES_REJECTED</name>
          <subject />
        </field>
        <field>
          <id>ERRORS</id>
          <enabled>Y</enabled>
          <name>ERRORS</name>
        </field>
        <field>
          <id>STARTDATE</id>
          <enabled>Y</enabled>
          <name>STARTDATE</name>
        </field>
        <field>
          <id>ENDDATE</id>
          <enabled>Y</enabled>
          <name>ENDDATE</name>
        </field>
        <field>
          <id>LOGDATE</id>
          <enabled>Y</enabled>
          <name>LOGDATE</name>
        </field>
        <field>
          <id>DEPDATE</id>
          <enabled>Y</enabled>
          <name>DEPDATE</name>
        </field>
        <field>
          <id>REPLAYDATE</id>
          <enabled>Y</enabled>
          <name>REPLAYDATE</name>
        </field>
        <field>
          <id>LOG_FIELD</id>
          <enabled>Y</enabled>
          <name>LOG_FIELD</name>
        </field>
        <field>
          <id>EXECUTING_SERVER</id>
          <enabled>N</enabled>
          <name>EXECUTING_SERVER</name>
        </field>
        <field>
          <id>EXECUTING_USER</id>
          <enabled>N</enabled>
          <name>EXECUTING_USER</name>
        </field>
        <field>
          <id>CLIENT</id>
          <enabled>N</enabled>
          <name>CLIENT</name>
        </field>
      </trans-log-table>
      <perf-log-table>
        <connection />
        <schema />
        <table />
        <interval />
        <timeout_days />
        <field>
          <id>ID_BATCH</id>
          <enabled>Y</enabled>
          <name>ID_BATCH</name>
        </field>
        <field>
          <id>SEQ_NR</id>
          <enabled>Y</enabled>
          <name>SEQ_NR</name>
        </field>
        <field>
          <id>LOGDATE</id>
          <enabled>Y</enabled>
          <name>LOGDATE</name>
        </field>
        <field>
          <id>TRANSNAME</id>
          <enabled>Y</enabled>
          <name>TRANSNAME</name>
        </field>
        <field>
          <id>STEPNAME</id>
          <enabled>Y</enabled>
          <name>STEPNAME</name>
        </field>
        <field>
          <id>STEP_COPY</id>
          <enabled>Y</enabled>
          <name>STEP_COPY</name>
        </field>
        <field>
          <id>LINES_READ</id>
          <enabled>Y</enabled>
          <name>LINES_READ</name>
        </field>
        <field>
          <id>LINES_WRITTEN</id>
          <enabled>Y</enabled>
          <name>LINES_WRITTEN</name>
        </field>
        <field>
          <id>LINES_UPDATED</id>
          <enabled>Y</enabled>
          <name>LINES_UPDATED</name>
        </field>
        <field>
          <id>LINES_INPUT</id>
          <enabled>Y</enabled>
          <name>LINES_INPUT</name>
        </field>
        <field>
          <id>LINES_OUTPUT</id>
          <enabled>Y</enabled>
          <name>LINES_OUTPUT</name>
        </field>
        <field>
          <id>LINES_REJECTED</id>
          <enabled>Y</enabled>
          <name>LINES_REJECTED</name>
        </field>
        <field>
          <id>ERRORS</id>
          <enabled>Y</enabled>
          <name>ERRORS</name>
        </field>
        <field>
          <id>INPUT_BUFFER_ROWS</id>
          <enabled>Y</enabled>
          <name>INPUT_BUFFER_ROWS</name>
        </field>
        <field>
          <id>OUTPUT_BUFFER_ROWS</id>
          <enabled>Y</enabled>
          <name>OUTPUT_BUFFER_ROWS</name>
        </field>
      </perf-log-table>
      <channel-log-table>
        <connection />
        <schema />
        <table />
        <timeout_days />
        <field>
          <id>ID_BATCH</id>
          <enabled>Y</enabled>
          <name>ID_BATCH</name>
        </field>
        <field>
          <id>CHANNEL_ID</id>
          <enabled>Y</enabled>
          <name>CHANNEL_ID</name>
        </field>
        <field>
          <id>LOG_DATE</id>
          <enabled>Y</enabled>
          <name>LOG_DATE</name>
        </field>
        <field>
          <id>LOGGING_OBJECT_TYPE</id>
          <enabled>Y</enabled>
          <name>LOGGING_OBJECT_TYPE</name>
        </field>
        <field>
          <id>OBJECT_NAME</id>
          <enabled>Y</enabled>
          <name>OBJECT_NAME</name>
        </field>
        <field>
          <id>OBJECT_COPY</id>
          <enabled>Y</enabled>
          <name>OBJECT_COPY</name>
        </field>
        <field>
          <id>REPOSITORY_DIRECTORY</id>
          <enabled>Y</enabled>
          <name>REPOSITORY_DIRECTORY</name>
        </field>
        <field>
          <id>FILENAME</id>
          <enabled>Y</enabled>
          <name>FILENAME</name>
        </field>
        <field>
          <id>OBJECT_ID</id>
          <enabled>Y</enabled>
          <name>OBJECT_ID</name>
        </field>
        <field>
          <id>OBJECT_REVISION</id>
          <enabled>Y</enabled>
          <name>OBJECT_REVISION</name>
        </field>
        <field>
          <id>PARENT_CHANNEL_ID</id>
          <enabled>Y</enabled>
          <name>PARENT_CHANNEL_ID</name>
        </field>
        <field>
          <id>ROOT_CHANNEL_ID</id>
          <enabled>Y</enabled>
          <name>ROOT_CHANNEL_ID</name>
        </field>
      </channel-log-table>
      <step-log-table>
        <connection />
        <schema />
        <table />
        <timeout_days />
        <field>
          <id>ID_BATCH</id>
          <enabled>Y</enabled>
          <name>ID_BATCH</name>
        </field>
        <field>
          <id>CHANNEL_ID</id>
          <enabled>Y</enabled>
          <name>CHANNEL_ID</name>
        </field>
        <field>
          <id>LOG_DATE</id>
          <enabled>Y</enabled>
          <name>LOG_DATE</name>
        </field>
        <field>
          <id>TRANSNAME</id>
          <enabled>Y</enabled>
          <name>TRANSNAME</name>
        </field>
        <field>
          <id>STEPNAME</id>
          <enabled>Y</enabled>
          <name>STEPNAME</name>
        </field>
        <field>
          <id>STEP_COPY</id>
          <enabled>Y</enabled>
          <name>STEP_COPY</name>
        </field>
        <field>
          <id>LINES_READ</id>
          <enabled>Y</enabled>
          <name>LINES_READ</name>
        </field>
        <field>
          <id>LINES_WRITTEN</id>
          <enabled>Y</enabled>
          <name>LINES_WRITTEN</name>
        </field>
        <field>
          <id>LINES_UPDATED</id>
          <enabled>Y</enabled>
          <name>LINES_UPDATED</name>
        </field>
        <field>
          <id>LINES_INPUT</id>
          <enabled>Y</enabled>
          <name>LINES_INPUT</name>
        </field>
        <field>
          <id>LINES_OUTPUT</id>
          <enabled>Y</enabled>
          <name>LINES_OUTPUT</name>
        </field>
        <field>
          <id>LINES_REJECTED</id>
          <enabled>Y</enabled>
          <name>LINES_REJECTED</name>
        </field>
        <field>
          <id>ERRORS</id>
          <enabled>Y</enabled>
          <name>ERRORS</name>
        </field>
        <field>
          <id>LOG_FIELD</id>
          <enabled>N</enabled>
          <name>LOG_FIELD</name>
        </field>
      </step-log-table>
      <metrics-log-table>
        <connection />
        <schema />
        <table />
        <timeout_days />
        <field>
          <id>ID_BATCH</id>
          <enabled>Y</enabled>
          <name>ID_BATCH</name>
        </field>
        <field>
          <id>CHANNEL_ID</id>
          <enabled>Y</enabled>
          <name>CHANNEL_ID</name>
        </field>
        <field>
          <id>LOG_DATE</id>
          <enabled>Y</enabled>
          <name>LOG_DATE</name>
        </field>
        <field>
          <id>METRICS_DATE</id>
          <enabled>Y</enabled>
          <name>METRICS_DATE</name>
        </field>
        <field>
          <id>METRICS_CODE</id>
          <enabled>Y</enabled>
          <name>METRICS_CODE</name>
        </field>
        <field>
          <id>METRICS_DESCRIPTION</id>
          <enabled>Y</enabled>
          <name>METRICS_DESCRIPTION</name>
        </field>
        <field>
          <id>METRICS_SUBJECT</id>
          <enabled>Y</enabled>
          <name>METRICS_SUBJECT</name>
        </field>
        <field>
          <id>METRICS_TYPE</id>
          <enabled>Y</enabled>
          <name>METRICS_TYPE</name>
        </field>
        <field>
          <id>METRICS_VALUE</id>
          <enabled>Y</enabled>
          <name>METRICS_VALUE</name>
        </field>
      </metrics-log-table>
    </log>
    <maxdate>
      <connection />
      <table />
      <field />
      <offset>0.0</offset>
      <maxdiff>0.0</maxdiff>
    </maxdate>
    <size_rowset>10000</size_rowset>
    <sleep_time_empty>50</sleep_time_empty>
    <sleep_time_full>50</sleep_time_full>
    <unique_connections>N</unique_connections>
    <feedback_shown>Y</feedback_shown>
    <feedback_size>50000</feedback_size>
    <using_thread_priorities>Y</using_thread_priorities>
    <shared_objects_file />
    <capture_step_performance>N</capture_step_performance>
    <step_performance_capturing_delay>1000</step_performance_capturing_delay>
    <step_performance_capturing_size_limit>100</step_performance_capturing_size_limit>
    <dependencies>
    </dependencies>
    <partitionschemas>
    </partitionschemas>
    <slaveservers>
    </slaveservers>
    <clusterschemas>
    </clusterschemas>
    <created_user>-</created_user>
    <created_date>2012/03/28 12:34:54.776</created_date>
    <modified_user>-</modified_user>
    <modified_date>2012/03/28 12:34:54.776</modified_date>
    <key_for_session_key>H4sIAAAAAAAAAAMAAAAAAAAAAAA=</key_for_session_key>
    <is_key_private>N</is_key_private>
  </info>
  <notepads>
    <notepad>
      <note>Disclaimer: The attached mapplet is provided “as-is” and without any support services, and no warranty or guarantee is 
provided beyond what is specified under the applicable services agreement (if there is one). Using any and all copies of 
this mapplet, in whole or in part, indicates acceptance of all risks.

Setting Leading0 in "mask" step to enable / disable support for leading zero (true/false)
Setting numeric_only in "mask" step to enable to mask only numbers (true/false)
Setting keep_first=6   >> this would keep the first 6 characters of input unmasked. Leading0 starts after keep_first

Copyright (c) 2019 by Delphix. All rights reserved.</note>
      <xloc>0</xloc>
      <yloc>0</yloc>
      <width>739</width>
      <heigth>145</heigth>
      <fontname>.SF NS Text</fontname>
      <fontsize>9</fontsize>
      <fontbold>N</fontbold>
      <fontitalic>N</fontitalic>
      <fontcolorred>0</fontcolorred>
      <fontcolorgreen>0</fontcolorgreen>
      <fontcolorblue>0</fontcolorblue>
      <backgroundcolorred>255</backgroundcolorred>
      <backgroundcolorgreen>205</backgroundcolorgreen>
      <backgroundcolorblue>112</backgroundcolorblue>
      <bordercolorred>100</bordercolorred>
      <bordercolorgreen>100</bordercolorgreen>
      <bordercolorblue>100</bordercolorblue>
      <drawshadow>Y</drawshadow>
    </notepad>
  </notepads>
  <order>
    <hop>
      <from>SelectValues</from>
      <to>Mapping_Algo_MapOutSpec</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>Mapplet_Algo_MapInpSpec</from>
      <to>mask</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>mask</from>
      <to>SelectValues</to>
      <enabled>Y</enabled>
    </hop>
  </order>
  <step>
    <name>Mapping_Algo_MapOutSpec</name>
    <type>MappingOutput</type>
    <description />
    <distribute>Y</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <attributes />
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>736</xloc>
      <yloc>128</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>Mapplet_Algo_MapInpSpec</name>
    <type>MappingInput</type>
    <description />
    <distribute>Y</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <fields>
      <field>
        <name>inputValue</name>
        <type>String</type>
        <length>-1</length>
        <precision>-1</precision>
      </field>
      <select_unspecified>N</select_unspecified>
    </fields>
    <attributes />
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>64</xloc>
      <yloc>128</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>SelectValues</name>
    <type>SelectValues</type>
    <description />
    <distribute>Y</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <fields>
      <select_unspecified>N</select_unspecified>
      <remove>
        <name>inputValue</name>
      </remove>
    </fields>
    <attributes />
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>528</xloc>
      <yloc>128</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>mask</name>
    <type>ScriptValueMod</type>
    <description />
    <distribute>Y</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <compatible>N</compatible>
    <optimizationLevel>9</optimizationLevel>
    <jsScripts>
      <jsScript>
        <jsScript_type>0</jsScript_type>
        <jsScript_name>Script 1</jsScript_name>
        <jsScript_script>// sm_shift_uni : version 1.5
// cpf_cnpj : version 2.0 -- created by: david.wells@delphix.com | original cpf/cnpj js code: daniel.stolf@delphix.com | updated by: rafael@delphix.com 



if( !inputValue || inputValue == null ||  isEmpty(inputValue) )
{
	outputValue = inputValue;
}
else
{	
	outputValue = (inputValue == 'null')? null : inputValue.replace(DOCTO_REGEX,function($0, $1, $2, $3, $4, $5, $6){ return maskValue([$0, $2, $3], shiftValNum) ;});
}
</jsScript_script>
      </jsScript>
      <jsScript>
        <jsScript_type>1</jsScript_type>
        <jsScript_name>Start</jsScript_name>
        <jsScript_script>//declare variables here - not in the main script... set initial values needed
var outputValue="";
//
var last = null;
const initialNumStr = "918273645";
var initialLowerCaseStr	= "abcdefghijklmnopqrstuvwxyz";
var initialUpperCaseStr  = "ZYXWVUTSRQPONMLKJIHGFEDCBA";
var initialUpperSpecStr  = "ÀÁÂÃÄÅÆÈÉÊËÇÌÍÎÏÑÐŠÒÓÔÕÖŐÙÚÛÜŰÝŸŽ"
var initialLowerSpecStr  = "àáâãäåæèéêëçìíîïñšòóôõöðùúûüűÿýž"
var initialUpperCyrStr  = "AБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ"
var initialLowerCyrStr  = "Aбвгдежзийклмнопрстуфхцчшщъыьэюя"

var numShiftMax = 9;
var lowerShiftMax=26;   //14;
var upperShiftMax=26;  //21;
var upperSpecMax=33
var lowerSpecMax=32
var lowerCyrMax=32
var upperCyrMax=32

var ArbitraryStringNum	= "Delphix delivers data at the speed of business"
var ArbitraryStringLower	= "Really love time off as I can do fancy things!"
var ArbitraryStringUpper	= "That's a simple attempt to do masking of chars"
var ArbitraryStringSpecUpper = "Accented chars look indeed extremly funny"
var ArbitraryStringSpecLower = "Lower case accents are often used in weird words"
var ArbitraryStringCyrUpper = "Cyrilic looks funny but is mostly like Latin"
var ArbitraryStringCyrLower = "Lower case cyrilic looks like uppercase but is different"

// Double the length of the lookup strings so we don't get overflows...cheap way to deal with that
var charSetNumArr  		= (initialNumStr + initialNumStr).split("");
var charSetStrArr	 	= (initialLowerCaseStr + initialLowerCaseStr).split("");
var charSetStrCapsArr 	= (initialUpperCaseStr + initialUpperCaseStr).split("");
var charSetUpperSpec 	= (initialUpperSpecStr + initialUpperSpecStr).split("");
var charSetLowerSpec 	= (initialLowerSpecStr + initialLowerSpecStr).split("");
var charSetUpperCyr 	= (initialUpperCyrStr + initialUpperCyrStr).split("");
var charSetLowerCyr 	= (initialLowerCyrStr + initialLowerCyrStr).split("");

// Use SL encyrption hash to create shift values
var CharShift_NumKey       = com.masking.encryption.Encryption.getLookupKey(ArbitraryStringNum,numShiftMax,  "/var/delphix/dmsuite/resources/keys/RawBytes.dat", "/var/delphix/dmsuite/resources/keys/RawBytes.dat", "/var/delphix/dmsuite/resources/keys/Alias.dat");
var CharShift_UpperCaseKey = com.masking.encryption.Encryption.getLookupKey(ArbitraryStringUpper,upperShiftMax,  "/var/delphix/dmsuite/resources/keys/RawBytes.dat", "/var/delphix/dmsuite/resources/keys/RawBytes.dat", "/var/delphix/dmsuite/resources/keys/Alias.dat");
var CharShift_LowerCaseKey = com.masking.encryption.Encryption.getLookupKey(ArbitraryStringLower,lowerShiftMax,  "/var/delphix/dmsuite/resources/keys/RawBytes.dat", "/var/delphix/dmsuite/resources/keys/RawBytes.dat", "/var/delphix/dmsuite/resources/keys/Alias.dat");
var CharShift_UpperSpecKey = com.masking.encryption.Encryption.getLookupKey(ArbitraryStringSpecUpper,upperSpecMax,  "/var/delphix/dmsuite/resources/keys/RawBytes.dat", "/var/delphix/dmsuite/resources/keys/RawBytes.dat", "/var/delphix/dmsuite/resources/keys/Alias.dat");
var CharShift_LowerSpecKey = com.masking.encryption.Encryption.getLookupKey(ArbitraryStringSpecLower,lowerSpecMax,  "/var/delphix/dmsuite/resources/keys/RawBytes.dat", "/var/delphix/dmsuite/resources/keys/RawBytes.dat", "/var/delphix/dmsuite/resources/keys/Alias.dat");
var CharShift_UpperCyrKey = com.masking.encryption.Encryption.getLookupKey(ArbitraryStringCyrUpper,upperCyrMax,  "/var/delphix/dmsuite/resources/keys/RawBytes.dat", "/var/delphix/dmsuite/resources/keys/RawBytes.dat", "/var/delphix/dmsuite/resources/keys/Alias.dat");
var CharShift_LowerCyrKey = com.masking.encryption.Encryption.getLookupKey(ArbitraryStringCyrLower,lowerCyrMax,  "/var/delphix/dmsuite/resources/keys/RawBytes.dat", "/var/delphix/dmsuite/resources/keys/RawBytes.dat", "/var/delphix/dmsuite/resources/keys/Alias.dat");


//Add one to the hash since it can be zero - the ShiftMax values can't be more than the length of the inital string - 1
var shiftValNum = parseInt(CharShift_NumKey, 10)+1;
var shiftValLowerCase = parseInt(CharShift_LowerCaseKey, 10)+1;
var shiftValUpperCase = parseInt(CharShift_UpperCaseKey, 10)+1;
var shiftValUpperSpec = parseInt(CharShift_UpperSpecKey, 10)+1;
var shiftValLowerSpec = parseInt(CharShift_LowerSpecKey, 10)+1;
var shiftValUpperCyr = parseInt(CharShift_UpperCyrKey, 10)+1;
var shiftValLowerCyr = parseInt(CharShift_LowerCyrKey, 10)+1;
 

// position specific mapping
function myShift( a1, a2, a3) {
	return ((a1 + a2) % a3) + 1;
}

function padLeft(str, n) {
    pad = Array(n+1).join("0")
    ans = pad.substring(0, pad.length - str.length) + str
    return ans
}

// Choose true to mask invalid numbers (even if both (CPF/CNPJ) validations fail).
// Note: When masking invalid, the verifying digits won't be generated
const maskInvalid = false

// Choose true to mask leading 0s, or false to ignore leading 0s.
const maskLeading0=false;

// choose missing digit tolerance, leave just on DOCTO_REGEX declaration
// higher tolerance = worse performance
// low tolerance non-multiline DOCTO_REGEX 
// const DOCTO_REGEX = /^\b((\d{1,2}\.?\d{3}\.?\d{3}\/?\d{4}\-?\d{2})|(\d{2,3}\.?\d{3}\.?\d{3}(?:\-|\.)?\d{2}))\b(?!\d|-|\/|\.)$/g

// ultra high tolerance non-multiline DOCTO_REGEX 
const DOCTO_REGEX = /^\b((\d{1,3}\.?\d{1,3}\.?\d{1,3}(?:\-|\.)?\d{2})|(\d{0,2}\.?\d{0,3}\.?\d{0,3}\/?\d{1,4}\-?\d{2}))\b(?!\d|-|\/|\.)$/g

// zero tolerance DOCTO_REGEX - 1 missing digit tolerance
// const DOCTO_REGEX = /^\b((\d{3}\.?\d{3}\.?\d{3}(?:\-|\.)?\d{2})|(\d{2}\.?\d{3}\.?\d{3}\/?\d{4}\-?\d{2}))\b(?!\d|-|\/|\.)$/g
// negative look behind /(?&lt;!\d|-|\/|\.)((\d{2}\.?\d{3}\.?\d{3}\/?\d{4}\-?\d{2})|(\d{3}\.?\d{3}\.?\d{3}(?:\-|\.)?\d{2}))(?!\d|-|\/|\.)/g

// low tolerance DOCTO_REGEX - 1 missing digit tolerance
// const DOCTO_REGEX = /^\b((\d{1,3}\.?\d{3}\.?\d{3}(?:\-|\.)?\d{2})|(\d{1,2}\.?\d{3}\.?\d{3}\/?\d{4}\-?\d{2}))\b(?!\d|-|\/|\.)$/g

// medium tolerance DOCTO_REGEX - 2 missing digit tolerance
// const DOCTO_REGEX = /^\b((\d{2,3}\.?\d{2,3}\.?\d{3}(?:\-|\.)?\d{2})|(\d{1,2}\.?\d{2,3}\.?\d{3}\/?\d{4}\-?\d{2}))\b(?!\d|-|\/|\.)$/g

// high tolerance DOCTO_REGEX - up to 6 missing digit tolerance
// const DOCTO_REGEX = /(?&lt;!\d|-|\/|\.)((\d{1,2}\.?\d{1,3}\.?\d{1,3}\/?\d{4}\-?\d{2})|(\d{1,3}\.?\d{1,3}\.?\d{1,3}(?:\-|\.)?\d{2}))(?!\d|-|\/|\.)/g

const BLACKLIST_CPF = "00000000000,11111111111,22222222222,33333333333,44444444444,55555555555,66666666666,77777777777,88888888888,99999999999";
const BLACKLIST_CNPJ ="00000000000000,11111111111111,22222222222222,33333333333333,44444444444444,55555555555555,66666666666666,77777777777777,88888888888888,99999999999999"


function isValidCNPJ (inputValue)  {

  // stripped value to just numbers 
  var cnpj = inputValue.replace(/\D/g,'');
  // A stripped CNPJ cannot have more than 14 characters
  if (cnpj.length > 14 ) return false;
  

  // pad original value with 0s
  cnpj = padLeft(cnpj, 14);

  // CNPJ can't be blacklisted
  if (-1 != BLACKLIST_CNPJ.indexOf(cnpj)) { return false; }

  // check verifier digit and return result
  numbers = cnpj.substr(0, 12);
  numbers += verifierDigitCNPJ(numbers);
  numbers += verifierDigitCNPJ(numbers);

  return numbers.substr(-2) === cnpj.substr(-2);
}

function isValidCPF (inputValue) {
  // stripped value to just numbers 
  var cpf = inputValue.replace(/\D/g,'');
  // CPF cannot have more than 11 characters
  if (cpf.length > 11) { return false; }
  

  // pad original value with 0s
  cpf = padLeft(cpf, 11);

  // CPF can't be blacklisted.
  // We also ignore srings that star with 8 consecutive 0s, as there's a relatively
  // high chance (1%) of random sring in this pattern being a valid CPF number
  var allZ=/^0{8}/i;
  if (allZ.test(cpf)) return false;
  if (-1 != BLACKLIST_CPF.indexOf(cpf)) { return false; }

  // check verifier digit and return result
  numbers = cpf.substr(0, 9);
  numbers += verifierDigitCPF(numbers);
  numbers += verifierDigitCPF(numbers);
  return numbers.substr(-2) === cpf.substr(-2);
}

/**
 * Compute the Verifier Digit (or "Dígito Verificador (DV)" in PT-BR).
 *
 * You can learn more about the algorithm on [wikipedia (pt-br)](https://pt.wikipedia.org/wiki/D%C3%ADgito_verificador)
 *
 * @param {string} input a string with only numbers.
 * @returns {number} the verifier digit.
 */
function verifierDigitCPF (input) {
    var numbers = input.toString();
    numbers = numbers.split("").map(function(number){ return parseInt(number, 10); });
  
    const modulus = numbers.length + 1;
  
    const multiplied = numbers.map(function(number, index) {
      return number * (modulus - index);
    });
  
    const mod = multiplied.reduce(function(buffer, number){
      return buffer + number;
    }) % 11;
  
    return (mod &lt; 2 ? 0 : 11 - mod);
}

/**
* Compute the Verifier Digit ("Dígito Verificador (DV)" in portuguese) for CNPJ.
*
* [wikipedia (pt-br)](https://pt.wikipedia.org/wiki/D%C3%ADgito_verificador)
*
* @param {string} numbers the CNPJ string (only numbers)
* @returns {number} the verifier digit.
*/
function verifierDigitCNPJ (input) {
    var numbers = input.toString();
    index = 2;
    const reverse = numbers.split("").reduce(function(buffer, number) {
      return [parseInt(number, 10)].concat(buffer);
    }, []);
  
    const sum = reverse.reduce(function(buffer, number) {
      buffer += number * index;
      index = (index === 9 ? 2 : index + 1);
      return buffer;
    }, 0);
  
    const mod = sum % 11;
    return (mod &lt; 2 ? 0 : 11 - mod);
}


function maskValue (inputArray, shift) {
    var N=S=0
    var shiftVal = (shift==9)? shift - 1 : shift ;
    var inputDoc = inputArray[0];
    var cpf = inputArray[1];
    var cnpj = inputArray[2];
    var docValue
    var validatedDoc = false;
    /* CPF
     * N number of digits in each document
     * S is the stop condition to shift the values
     * For CPF, we want to mask the whole value
     */
    if ( cpf &amp;&amp; isValidCPF(cpf) ){
        // console.log("CPF");
        docValue  =cpf;//.trim().replace(/\s+$/, '');
        validatedDoc=true
        N=11;
        S=9;
    /* CNPJ
     * FOR CNPJ OTOH, we just want to shift the first 8 digits (root) 
     * and leave the branches untouched
     */
    } else if (cnpj &amp;&amp; isValidCNPJ(cnpj)){
        // console.log("CNPJ");
        docValue  =cnpj;//.trim().replace(/\s+$/, '');
        validatedDoc=true
        N=14;
        S=8;
    /* Invalid Document
     * shift everyhing
     */
    } else {
        // if the regex tolerance is too high, the capture groups might no help much
        // but SOMETHING was captured, so we give one last try with the main capture
        if (!cpf &amp;&amp; isValidCPF(inputDoc)){
            // console.log("CPF");
            docValue  =inputDoc;//.trim().replace(/\s+$/, '');
            validatedDoc=true
            N=11;
            S=9;
        } else if(!cnpj &amp;&amp; isValidCNPJ(inputDoc)){
            // console.log("CNPJ");
            docValue  =inputDoc;//.trim().replace(/\s+$/, '');
            validatedDoc=true
            N=14;
            S=8;
        }else {
            if (! maskInvalid) return inputDoc;
            docValue = inputDoc.trim().replace(/\s+$/, '');
            N=S=20;
        } 
    }
    // pad string with 0s
    var tmp = docValue.replace(/\D/g,'');
    if (tmp.length==0) return docValue;
    var numbers=padLeft(docValue, docValue.length + N - tmp.length);
    var diff = numbers.length - docValue.length;
    var inputArray = numbers.split("");
    var maskedNumbers = ""
    var cnt = 0;
    var i=0;
    var previous = "0"

    
    if (!maskLeading0){
        var zeroRegEx=/^(0\.?){1,8}/g
        segment=numbers.match(zeroRegEx);
        if (segment){
            i=segment[0].length;
            maskedNumbers=segment[0].replace(/\D/g,'');
            cnt=maskedNumbers.length;
        }
    }

    if (cnt == S) {
        cnt-=1;
        i-=1;
        diff = (diff >= S)? S-1 : diff ;
    }

    for (; i &lt; inputArray.length; i++) {
        if ( /^\d+$/.test(inputArray[i]) ) {   
            if (cnt &lt; S) {
                if (inputArray[i]!="0" ){
                    inputArray[i] = charSetNumArr[myShift(shiftVal, (charSetNumArr.indexOf(inputArray[i])+charSetNumArr.indexOf(previous)) , numShiftMax)];
                }
                previous="0";

                cnt+=1
            }
            maskedNumbers+=inputArray[i]
        }
    }

    // if original value was a CPF
    if (N == 11 &amp;&amp; validatedDoc){
        maskedNumbers = maskedNumbers.substr(0, maskedNumbers.length-2);
        maskedNumbers += verifierDigitCPF(maskedNumbers);
        inputArray[inputArray.length -2] = maskedNumbers[maskedNumbers.length -1]
        maskedNumbers += verifierDigitCPF(maskedNumbers);
        inputArray[inputArray.length - 1] = maskedNumbers[maskedNumbers.length -1]
    } 
    // if original value was a CNPJ
    else if (N==14 &amp;&amp; validatedDoc) {
        maskedNumbers = maskedNumbers.substr(0, maskedNumbers.length-2);
        maskedNumbers += verifierDigitCNPJ(maskedNumbers);
        inputArray[inputArray.length -2] = maskedNumbers[maskedNumbers.length -1]
        maskedNumbers += verifierDigitCNPJ(maskedNumbers);
        inputArray[inputArray.length - 1] = maskedNumbers[maskedNumbers.length -1]
    }
    // else original value wasn't a valid document and there'se no VD calculation

    if (!maskLeading0) return inputArray.join("").slice(diff);
    return inputArray.join("");
}
</jsScript_script>
      </jsScript>
    </jsScripts>
    <fields>
      <field>
        <name>outputValue</name>
        <rename>outputValue</rename>
        <type>String</type>
        <length>-1</length>
        <precision>-1</precision>
        <replace>N</replace>
      </field>
    </fields>
    <attributes />
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>224</xloc>
      <yloc>128</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step_error_handling>
    <error>
      <source_step>mask</source_step>
      <target_step />
      <is_enabled>N</is_enabled>
      <nr_valuename />
      <descriptions_valuename />
      <fields_valuename />
      <codes_valuename />
      <max_errors />
      <max_pct_errors />
      <min_pct_rows />
    </error>
  </step_error_handling>
  <slave-step-copy-partition-distribution>
  </slave-step-copy-partition-distribution>
  <slave_transformation>N</slave_transformation>
  <attributes />
</transformation>
